locals {
  GRAFANA_HOST   =  "grafana.${local.CLUSTER_DOMAIN}"
}
resource "rustack_dns_record" "grafana_dns_record" {
  # Create DNS_NUM records for the GRAFANA_HOST, pointing to the
  # external IPs of the first DNS_NUM cluster nodes (or fewer if not enough nodes).
  # This allows for round-robin DNS if multiple records are created for the same host.
  for_each = {
    for i in range(min(var.DNS_NUM, length(local.nodes_output.CLUSTER_NODES))) :
    i => local.nodes_output.CLUSTER_NODES[i].hostname
  }
  dns_id = data.rustack_dns.cluster_dns.id
  type   = "A"
  host   = "${local.GRAFANA_HOST}."
  data   = each.value # This is the external_ip from the for_each map
}

resource "kubernetes_namespace" "grafana" {
  metadata {
    name = "grafana"
  }
}
resource "kubernetes_deployment" "grafana" {
  metadata {
    name      = "grafana"
    namespace = kubernetes_namespace.grafana.metadata[0].name
  }

  spec {
    selector {
      match_labels = {
        app = "grafana"
      }
    }

    template {
      metadata {
        labels = {
          app = "grafana"
        }
      }

      spec {
        container {
          image = "grafana/grafana:latest"
          name  = "grafana"

          port {
            container_port = 3000
          }
        }
      }
    }

    replicas = 1
  }
}

resource "kubernetes_service" "grafana" {
  metadata {
    name      = "grafana"
    namespace = kubernetes_namespace.grafana.metadata[0].name
  }

  spec {
    selector = {
      app = "grafana"
    }

    port {
      name        = "http"
      port        = 3000
      target_port = 3000
    }

  }
}

resource "kubernetes_ingress_v1" "grafana" {
  metadata {
    name      = "grafana"
    namespace = kubernetes_namespace.grafana.metadata[0].name
    annotations = {
      "cert-manager.io/cluster-issuer" = "letsencrypt-prod"
    }
  }
  spec {
    rule {
        host = local.GRAFANA_HOST
      http {
        path {
          path = "/"
          backend {
            service {
              name = kubernetes_service.grafana.metadata[0].name
              port {
                number = kubernetes_service.grafana.spec[0].port[0].port
              }
            }
          }
        }
      }
    }
    tls {
      secret_name = local.GRAFANA_HOST
      hosts       = [local.GRAFANA_HOST]
    }
  }
}

# resource "kubernetes_ingress" "grafana" {
#   metadata {
#     name = "grafana"
#     annotations = {
#         "cert-manager.io/cluster-issuer" = "letsencrypt-prod"
#     }
#   }

#   spec {
#     backend {
#       service_name = kubernetes_service.grafana.metadata[0].name
#       service_port = kubernetes_service.grafana.spec[0].port[0].port
#     }
#     rule {
#       http {
#         path {
#           backend {
#             service_name = kubernetes_service.grafana.metadata[0].name
#             service_port = kubernetes_service.grafana.spec[0].port[0].port
#           }
#           path = "/"
#         }

#       }
#     }

#     tls {
#       secret_name = "grafana.${local.CLUSTER_DOMAIN}"
#       hosts = [ "grafana.${local.CLUSTER_DOMAIN}" ]
#     }
#   }
# }
